version: '3.7'

services:
  app-server: 
    container_name: server
    build:
      context: ../server 
      dockerfile: Dockerfile
    ports:
      - "${SERVER_APP_PORT}:8080" 
    restart: always
    depends_on: 
      - database 
    volumes:
      - ${FABRIC_SAMPLES_PATH}:/fabric-samples
    extra_hosts:
      - host.docker.internal:host-gateway
    environment: 
      FABRIC_SAMPLES_PATH: /fabric-samples
      NETWORK_PATH: test-network
      DATABASE_USER: root
      DATABASE_PASSWORD: root
      DATABASE_HOST: database
      DATABASE_DIALECT: mysql
      DATABASE_NAME: mysqldb
      DATABASE_PORT: 3306    
    networks: 
      - backend
      - frontend

  app-oracle: 
    container_name: oracle
    build:
      context: ../oracle
      dockerfile: Dockerfile
    ports:
      - "${ORACLE_APP_PORT}:8080" 
    restart: always
    environment: 
      FABRIC_SAMPLES_PATH: /fabric-samples
      NETWORK_PATH: test-network
    networks: 
      - backend
      - frontend

  
  app-client:
    container_name: client
    hostname: client
    build:
      context: ../client 
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL}
    ports:
      - "${CLIENT_APP_PORT}:80" 
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend  

  database:
    image: mysql:latest
    container_name: database
    ports:
        - 3306:3306
    command: --init-file /data/application/init.sql
    volumes:
        - ./init.sql:/data/application/init.sql
    environment:
        MYSQL_ROOT_USER: root
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: mysqldb
        MYSQL_USER: user
        MYSQL_PASSWORD: user

    restart: always
    networks:
      - backend
networks:
  backend:
  frontend:    
    
